#!/bin/sh
################################################################################
# frontend
################################################################################
. /etc/rc.d/functions

# steep is 0.5 sec
weston_start_timeout=20

start() {

    if [ -n "`/bin/pidof mythfrontend`" ] ; then

        /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/frontend] mythfrontend already runing ..."

        this_script_done
        return 0
    fi

    # Make sure that the file ownership is correct.
    /bin/chown -Rh minimyth:minimyth /home/minimyth 2>/dev/null &

    if [ "x${MM_MYTHTV_DRAW_ON}" = "xeglfs" ] ; then

        /bin/chmod 777 -R /dev/input*
        /bin/chmod 777 -R /dev/vchiq

        mm_message_output info "starting media player ..."

        /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/frontend] Starting mythfrontend (EGLFS) ..."
        su minimyth -c "mythfrontend.sh >> /var/log/mythfrontend.log 2>&1 &"

    elif [ "x${MM_MYTHTV_DRAW_ON}" = "xwayland" ] ; then

        /bin/chmod 777 -R /dev/input*
        /bin/chmod 777 -R /dev/vchiq

        /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/frontend] Starting Weston ..."
        if [ -z "`/bin/pidof weston`" ] ; then

            mm_message_output info "starting Weston ..."

            if [ -z "`/bin/pidof seatd`" ] ; then
                /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/frontend] Starting seatd ..."
                /usr/bin/seatd -uminimyth -gminimyth -l debug > /var/log/seatd.log 2>&1 &
            fi

            openvt -v -w -s -- su minimyth -c "/usr/bin/weston.sh --config=/etc/weston-minimal.ini" &

            i=0
            while [ $i -lt ${weston_start_timeout} ] ; do

                i=$((${i} + 1))
                # it looks like dash not works as expected with [ -e "/var/run/xdg/minimyth/wayland*.lock" ]
                # so check wayland socket more brutally...
                if [ ! x$(ls /var/run/xdg/minimyth/wayland*.lock 2>/dev/null) = "x" ] ; then
                    i=${weston_start_timeout}
                    /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/frontend] Weston started -> starting mythfrontend ..."
                    break
                else
                    if [ $i -ge ${weston_start_timeout} ] ; then
                        /usr/bin/logger -s -t minimyth -p "local0.err" "[init.d/frontend] Timeout starting Weston ..."
                        exit 1
                    else
                        /bin/sleep 0.5
                    fi
                fi
            done
        fi

        /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/frontend] Starting mythfrontend (Wayland) ..."
        su minimyth -c "mythfrontend.sh >> /var/log/mythfrontend.log 2>&1 &"

    elif [ "x${MM_MYTHTV_DRAW_ON}" = "xterm" ] ; then

        if [ -z "`/bin/pidof agetty`" ] ; then

            mm_message_output info "starting TTY terminal ..."

            /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/frontend] Starting agtty terminal ..."
            /sbin/agetty 9600 tty1 &
        fi

        this_script_done
        return 0

    else

        if [ -z "`/bin/pidof X`" ] ; then

            mm_message_output info "starting Xserver ..."
            /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/frontend] Starting..."

            # Prepare directory where X-windows session information is saved
            /bin/rm -fr           /tmp/.ICE-unix/
            /bin/mkdir -m 1777 -p /tmp/.ICE-unix/
            /bin/chown root:root  /tmp/.ICE-unix/

            /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/frontend] Configuring Xorg libs for ${MM_X_DRIVER}..."
            NVIDIA_TRUE='#'
            NVIDIA_LEGACY_TRUE='#'
            NOUVEAU_TRUE='#'
            INTEL_I810_TRUE='#'
            INTEL_I915_TRUE='#'
            RADEON_TRUE='#'
            VMWARE_TRUE='#'
            ARMSOC_TRUE='#'
            MESON_TRUE='#'
            VC4_TRUE='#'
            ROCKCHIP_TRUE='#'
            ALLWINNER_TRUE='#'
            case "${MM_X_DRIVER}" in
                intel_i810)
                    /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/frontend] Enabling intel_i810 driver in Xorg.conf..."
                    INTEL_I810_TRUE=''
                    ;;
                intel_i915)
                    /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/frontend] Enabling intel_i915 driver in Xorg.conf..."
                    INTEL_I915_TRUE=''
                    ;;
                nvidia)
                    /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/frontend] Enabling nvidia driver in Xorg.conf..."
                    NVIDIA_TRUE=''
                    ;;
                nouveau)
                    /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/frontend] Enabling nouveau driver in Xorg.conf..."
                    NOUVEAU_TRUE=''
                    ;;
                nvidia_legacy)
                    /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/frontend] Enabling nvidia legacy driver in Xorg.conf..."
                    NVIDIA_LEGACY_TRUE=''
                    ;;
                radeon)
                    /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/frontend] Enabling radeon driver in Xorg.conf..."
                    RADEON_TRUE=''
                    ;;
                vmware)
                    /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/frontend] Enabling vmware driver in Xorg.conf..."
                    VMWARE_TRUE=''
                    ;;
                armsoc)
                    /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/frontend] Enabling armsoc driver in Xorg.conf..."
                    ARMSOC_TRUE=''
                    ;;
                meson)
                    /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/frontend] Enabling meson driver in Xorg.conf..."
                    MESON_TRUE=''
                    ;;
                vc4)
                    /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/frontend] Enabling vc4 driver in Xorg.conf..."
                    VC4_TRUE=''
                    ;;
                rockchip)
                    /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/frontend] Enabling rockchip driver in Xorg.conf..."
                    ROCKCHIP_TRUE=''
                    ;;
                sun4i)
                    /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/frontend] Enabling allwinner driver in Xorg.conf..."
                    ALLWINNER_TRUE=''
                    ;;
            esac

            /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/frontend] Preparing Xorg.conf file..."

            /bin/sed -i "s%@MM_X_DRIVER@%${MM_X_DRIVER}%"               /etc/X11/xorg.conf
            /bin/sed -i "s%@NVIDIA_TRUE@%${NVIDIA_TRUE}%"               /etc/X11/xorg.conf
            /bin/sed -i "s%@NVIDIA_LEGACY_TRUE@%${NVIDIA_LEGACY_TRUE}%" /etc/X11/xorg.conf
            /bin/sed -i "s%@NOUVEAU_TRUE@%${NOUVEAU_TRUE}%"             /etc/X11/xorg.conf
            /bin/sed -i "s%@INTEL_I810_TRUE@%${INTEL_I810_TRUE}%"       /etc/X11/xorg.conf
            /bin/sed -i "s%@INTEL_I915_TRUE@%${INTEL_I915_TRUE}%"       /etc/X11/xorg.conf
            /bin/sed -i "s%@RADEON_TRUE@%${RADEON_TRUE}%"               /etc/X11/xorg.conf
            /bin/sed -i "s%@VMWARE_TRUE@%${VMWARE_TRUE}%"               /etc/X11/xorg.conf
            /bin/sed -i "s%@ARMSOC_TRUE@%${ARMSOC_TRUE}%"               /etc/X11/xorg.conf
            /bin/sed -i "s%@MESON_TRUE@%${MESON_TRUE}%"                 /etc/X11/xorg.conf
            /bin/sed -i "s%@VC4_TRUE@%${VC4_TRUE}%"                     /etc/X11/xorg.conf
            /bin/sed -i "s%@ROCKCHIP_TRUE@%${ROCKCHIP_TRUE}%"           /etc/X11/xorg.conf
            /bin/sed -i "s%@ALLWINNER_TRUE@%${ALLWINNER_TRUE}%"         /etc/X11/xorg.conf

            /usr/bin/logger -t minimyth -p "local0.info" "[init.d/frontend] Kicking Xinit..."
            /bin/su -c "/usr/bin/nohup /usr/bin/xinit > /dev/null 2>&1 &" - minimyth

            if [ "x${MM_LIRC_IRXEVENT_ENABLED}" = "xauto" ] ; then
                /usr/bin/logger -t minimyth -p "local0.info" "[init.d/frontend] Attempting to auto-configure usage of irxevent"
                MM_LIRC_IRXEVENT_ENABLED='no'
                if [ -e /etc/lirc/lircrc ] ; then
                    # Only one level of includes is supported.
                    lircrc_files="/etc/lirc/lircrc `/bin/cat /etc/lirc/lircrc | /bin/grep -e '^include ' | /bin/sed -e 's%^include *%%'`"
                    for lircrc_file in ${lircrc_files} ; do
                        if [ `/bin/cat ${lircrc_file} | /bin/grep -q -e '^ *prog *= *irxevent'` ] ; then
                            MM_LIRC_IRXEVENT_ENABLED='yes'
                        fi
                    done
                fi
            fi

            if [ "x${MM_LIRC_IRXEVENT_ENABLED}" = "xyes" ] ; then
                /usr/bin/test -n "`/bin/pidof irxevent`" && /usr/bin/killall irxevent
                /bin/sleep 1
                /usr/bin/logger -t minimyth -p "local0.info" "[init.d/frontend] Starting irxevent daemon..."
                /usr/bin/irxevent -d /etc/lirc/lircrc
            fi

        fi

        /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/frontend] Starting mythfrontend (X11) ..."
        su minimyth -c "mythfrontend.sh >> /var/log/mythfrontend.log 2>&1 &"

    fi

    if [ "x${MM_MYTHTV_WATCHDOG}" = "xyes" ] ; then
        if [ -z "`/bin/pidof mm_watchdog`" ] ; then
            /usr/bin/logger -t minimyth -p "local0.info" "[init.d/frontend] Starting mm_watchdog ..."
            /usr/bin/mm_watchdog &
        fi
    fi

    this_script_done
}

stop() {

    if [ -n "`/bin/pidof irxevent`" ] ; then
        /usr/bin/logger -t minimyth -p "local0.info" "[init.d/frontend] Killing irxevent daemon..."
        /usr/bin/killall irxevent
    fi

    if [ -n "`/bin/pidof mm_watchdog`" ] ; then
        /usr/bin/logger -t minimyth -p "local0.info" "[init.d/frontend] Killing mm_watchdog script..."
        /usr/bin/killall -9 mm_watchdog
    fi

    if [ "x${MM_MYTHTV_DRAW_ON}" = "xeglfs" ] ; then

        /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/frontend] Stoping mythfrontend (in EGLFS mode) ..."
        killall mythfrontend

    elif [ "x${MM_MYTHTV_DRAW_ON}" = "xwayland" ] ; then

        /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/frontend] Stoping mythfrontend (in Wayland mode) ..."
        killall mythfrontend

        mm_message_output info "stopping Weston ..."

        /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/frontend] Stoping Weston (in Wayland mode) ..."
        killall weston

    else

        /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/frontend] Stoping mythfrontend (in X11 mode) ..."
        killall mythfrontend

        mm_message_output info "stopping Xserver ..."

        /usr/bin/logger -s -t minimyth -p "local0.info" "[init.d/frontend] Stoping Xserver (in X11 mode) ..."
        killall xinit
        killall X

    fi

    return 0

}

case $1 in
    start) start ;;
    stop)  stop  ;;
esac
