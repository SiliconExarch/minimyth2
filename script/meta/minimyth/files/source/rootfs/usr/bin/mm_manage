#!/bin/sh

# v2023.11.22

. /etc/rc.d/functions
. /etc/mm_ui_localizations_sh

command=$1

MM_MASTER_SERVER_IP="@MM_MASTER_SERVER@"

pids=`/bin/pidof mm_manage`
instances=`/bin/echo ${pids} | /usr/bin/wc -w`
if [ ${instances} -ne 1 ] ; then
    echo "[mm_manage] Another instance already running...Exiting"
    exit 1
fi

#-------------------------------------------------------------------------------

if [ "x${command}" = "xrestart_mythfrontend" ] ; then 
  mm_manage _restart_mythfrontend &
  exit 0
fi
if [ "x${command}" = "x_restart_mythfrontend" ] ; then
  mm_show_mythnotify "${restart_mythfrontend_str}" '' ''
  /bin/sleep 5
  /usr/bin/logger -t minimyth -p "local0.info" "[mm_manage] Killing mythfrontend ..."
  /usr/bin/killall -9 mythfrontend
  /bin/umount /media/disk
  /etc/rc.d/init.d/kmsvnc stop
  mm_bt_switch_audio_to_default
  if [ -z "`/bin/pidof mm_watchdog`" ] ; then
    sleep 1
    /etc/rc.d/init.d/frontend start
    sleep 10
    /etc/rc.d/init.d/kmsvnc start
  fi
  exit 0
fi

#-------------------------------------------------------------------------------

if [ "x${command}" = "xrestart_xserver" ] ; then 
  mm_manage _restart_xserver &
  exit 0
fi
if [ "x${command}" = "x_restart_xserver" ] ; then 
  mm_show_mythnotify "${restart_xserver_str}" '' ''
  /bin/sleep 5
  /bin/umount /media/disk
  /usr/bin/logger -t minimyth -p "local0.info" "[mm_manage] Killing google-chrome ..."
  /usr/bin/killall chrome
  /usr/bin/logger -t minimyth -p "local0.info" "[mm_manage] Killing mythfrontend and display server ..."
  /etc/rc.d/init.d/frontend stop
  /usr/bin/logger -t minimyth -p "local0.info" "[mm_manage] Reloading mceusb module ..."
  /sbin/rmmod mceusb
  /sbin/modprobe mceusb
  /usr/bin/logger -t minimyth -p "local0.info" "[mm_manage] Reloading lirc daemons ..."
  /bin/sleep 2
  /etc/rc.d/init.d/lirc stop
  /etc/rc.d/init.d/lirc start
  /usr/bin/logger -t minimyth -p "local0.info" "[mm_manage] Starting mythfrontend and display server ..."
  /etc/rc.d/init.d/frontend start
  exit 0
fi


#-------------------------------------------------------------------------------

if [ "x${command}" = "xrestart_this_frontend" ] ; then
  mm_manage _restart_this_frontend &
  exit 0
fi
if [ "x${command}" = "x_restart_this_frontend" ] ; then
  mm_show_mythnotify "${restart_this_frontend_str}" '' ''
  /bin/sleep 5
  /sbin/reboot
  exit 0
fi


#-------------------------------------------------------------------------------

if [ "x${command}" = "xreload_this_system" ] ; then
  mm_show_mythnotify "${reload_this_system_str}" '' ''
  /bin/sleep 5
  /sbin/reboot
  exit 0
fi


#-------------------------------------------------------------------------------

if [ "x${command}" = "xshutdown_this_frontend" ] ; then
  mm_manage _shutdown_this_frontend &
  exit 0
fi
if [ "x${command}" = "x_shutdown_this_frontend" ] ; then
  mm_show_mythnotify "${shutdown_this_frontend_str}" '' ''
  /bin/sleep 5
  /sbin/poweroff
  exit 0
fi


#-------------------------------------------------------------------------------

if [ "x${command}" = "xrestart_mythbackend" ] ; then
  mm_manage _restart_mythbackend &
  exit 0
fi
if [ "x${command}" = "x_restart_mythbackend" ] ; then
  mm_show_mythnotify "${restart_mythbackend_str}" '' ''
  /bin/sleep 5
  ssh -c aes128-ctr root@${MM_MASTER_SERVER_IP} /usr/bin/systemctl restart mythbackend.service
  exit 0
fi


#-------------------------------------------------------------------------------

if [ "x${command}" = "xrestart_server" ] ; then
  mm_manage _restart_server &
  exit 0
fi
if [ "x${command}" = "x_restart_server" ] ; then
  mm_show_mythnotify "${restart_server_str}" '' ''
  /bin/sleep 5
  ssh -c aes128-ctr root@${MM_MASTER_SERVER_IP} reboot
  exit 0
fi


#-------------------------------------------------------------------------------

if [ "x${command}" = "xsave_themecache" ] ; then
  mm_manage _save_themecache &
  exit 0
fi
if [ "x${command}" = "x_save_themecache" ] ; then
  mm_show_mythnotify "${save_themecache_str}" '' ''
  /usr/bin/mm_command themecache_save > /tmp/tmp.out 2>&1
  if [ $? -eq 0 ] ; then
    mm_show_mythnotify "${save_themecache_ok_str}" '' 'ok'
  else
    result=`cat /tmp/tmp.out`
    mm_show_mythnotify "${error_str}" "${result}" 'error'
  fi
  exit 0
fi


#-------------------------------------------------------------------------------

if [ "x${command}" = "xsave_cookiejar" ] ; then
  mm_manage _save_cookiejar &
  exit 0
fi
if [ "x${command}" = "x_save_cookiejar" ] ; then
  mm_show_mythnotify "${save_cookiejar_str}" '' ''
  /usr/bin/mm_command cookiejar_save > /tmp/tmp.out 2>&1
  if [ $? -eq 0 ] ; then
    mm_show_mythnotify "${save_cookiejar_ok_str}" '' 'ok'
  else
    result=`cat /tmp/tmp.out`
    mm_show_mythnotify "${error_str}" "${result}" 'error'
  fi
  exit 0
fi


#-------------------------------------------------------------------------------
if [ "x${command}" = "xsave_game" ] ; then
  mm_manage _save_game &
  exit 0
fi
if [ "x${command}" = "x_save_game" ] ; then
  mm_show_mythnotify "${save_game_str}" '' ''
  /usr/bin/mm_command game_save > /tmp/tmp.out 2>&1
  if [ $? -eq 0 ] ; then
    mm_show_mythnotify "${save_game_ok_str}" '' 'ok'
  else
    result=`cat /tmp/tmp.out`
    mm_show_mythnotify "${error_str}" "${result}" 'error'
  fi
  exit 0
fi


#-------------------------------------------------------------------------------
if [ "x${command}" = "xrestore_game" ] ; then
  mm_manage _restore_game &
  exit 0
fi
if [ "x${command}" = "x_restore_game" ] ; then
  mm_show_mythnotify "${restore_game_str}" '' ''
  /usr/bin/mm_command game_restore > /tmp/tmp.out 2>&1
  if [ $? -eq 0 ] ; then
    mm_show_mythnotify "${restore_game_ok_str}" '' 'ok'
  else
    result=`cat /tmp/tmp.out`
    mm_show_mythnotify "${error_str}" "${result}" 'error'
  fi
  exit 0
fi



#-------------------------------------------------------------------------------
if [ "x${command}" = "xreload_voip_config" ] ; then
  mm_manage _reload_voip_config &
  exit 0
fi
if [ "x${command}" = "x_reload_voip_config" ] ; then
  mm_show_mythnotify "${reload_voip_config_str}" '' ''
  /usr/bin/mm_command reload_voip_config > /tmp/tmp.out 2>&1
  if [ $? -eq 0 ] ; then
    mm_show_mythnotify "${reload_voip_config_ok_str}" '' 'ok'
  else
    result=`cat /tmp/tmp.out`
    mm_show_mythnotify "${error_str}" "${result}" 'error'
  fi
  exit 0
fi



#-------------------------------------------------------------------------------
if [ "x${command}" = "xredownload_theme" ] ; then
  mm_manage _redownload_theme &
  exit 0
fi
if [ "x${command}" = "x_redownload_theme" ] ; then
  mm_show_mythnotify "${redownload_theme_str}" '' ''
  /usr/bin/mm_command redownload_theme > /tmp/tmp.out 2>&1
  if [ $? -eq 0 ] ; then
    mm_show_mythnotify "${redownload_theme_ok_str}" '' 'ok'
    mm_manage restart_mythfrontend &
  else
    result=`cat /tmp/tmp.out`
    mm_show_mythnotify "${error_str}" "${result}" 'error'
  fi
  exit 0
fi



#-------------------------------------------------------------------------------

if [ "x${command}" = "xcheck_updates" ] ; then
  mm_manage _check_updates &
  exit 0
fi
if [ "x${command}" = "x_check_updates" ] ; then
  if [ "x${MM_MINIMYTH_ONLINE_UPDATES_URL}" = "xlocal" ] ; then
    # Do update check for PXE booted diskless case
    mm_show_mythnotify "${checking_for_system_updates_str}" '' '' '12' "${system_updates_str}"
    ssh -c aes128-ctr root@${MM_MASTER_SERVER_IP} pacman -Sy > /dev/null 2>&1
    updates=`ssh -c aes128-ctr root@${MM_MASTER_SERVER_IP} pacman -Qqu | /usr/bin/wc -w 2> /dev/null`
    if [ -n ${updates} ] ; then
      if [ ! ${updates} = 0 ] ; then
        mm_show_mythnotify "${updates_detected_str}" ${updates}"${packages_were_updated_str}" 'warning' '12'
      else
        mm_show_mythnotify "${there_is_no_any_updates_for_yours_system_str}" '' 'ok' '12'
      fi
    fi
  else
    # Do update check for SD card/USB key booted case
    if [ "x${MM_MYTHTV_DRAW_ON}" = "xeglfs" ] ; then
      mm_show_mythnotify "${checking_in_background_str}" '' '' '900' "${system_updates_str}"
      /bin/su root -c "mm_do_online_update"
    else
      mm_show_mythnotify "${checking_for_system_updates_str}" '' '' '12' "${system_updates_str}"
      mm_term_start /bin/su root -c 'mm_do_online_update; echo \"\"; echo \"Press BACK or Esc for exit...\"; read;'
    fi
  fi
  exit 0
fi



#-------------------------------------------------------------------------------

if [ "x${command}" = "xinstall_updates" ] ; then
  mm_manage _install_updates &
  exit 0
fi
if [ "x${command}" = "x_install_updates" ] ; then
  if [ "x${MM_MINIMYTH_ONLINE_UPDATES_URL}" = "xlocal" ] ; then
    # Do update update for PXE booted diskless case
    if [ "x${MM_MYTHTV_DRAW_ON}" = "xeglfs" ] ; then
      mm_show_mythnotify "${installing_updates_in_background_str}" '' '' '900' "${system_updates_str}"
      ssh -c aes128-ctr root@${MM_MASTER_SERVER_IP} pacman -Syu --noconfirm
      ssh -c aes128-ctr root@${MM_MASTER_SERVER_IP} pacman -Scq --noconfirm
      ssh -c aes128-ctr root@${MM_MASTER_SERVER_IP} /usr/bin/systemctl daemon-reload
    else
      mm_show_mythnotify "${installing_system_updates_str}" '' '' '12' "${system_updates_str}"
      mm_term_start /bin/su root -c "ssh -c aes128-ctr root@${MM_MASTER_SERVER_IP} pacman -Syu --noconfirm; ssh -c aes128-ctr root@${MM_MASTER_SERVER_IP} pacman -Scq --noconfirm; ssh -c aes128-ctr root@${MM_MASTER_SERVER_IP} /usr/bin/systemctl daemon-reload; echo \"\"; echo \"Press BACK or Esc for exit...\"; read;"
      # If new PXE image was installed - then force reboot to load this ne image
      if [ -e /usr/local/share/myth-at-home/version ] ; then
        rc=`/usr/bin/cmp /etc/version /usr/local/share/myth-at-home/version`
        if [ -n "${rc}" ] ; then
          mm_manage reload_this_system &
        fi
      fi
    fi
  else
    # Do update for SD card/USB key booted case
    if [ "x${MM_MYTHTV_DRAW_ON}" = "xeglfs" ] ; then
      mm_show_mythnotify "${installing_updates_in_background_str}" '' '' '900' "${system_updates_str}"
      /bin/su root -c "mm_do_online_update doupdate"
    else
      mm_show_mythnotify "${installing_system_updates_str}" '' '' '12' "${system_updates_str}"
      mm_term_start /bin/su root -c 'mm_do_online_update doupdate; echo \"\"; echo \"Press BACK or Esc for exit...\"; read;'
    fi
  fi
  exit 0
fi



#-------------------------------------------------------------------------------

if [ "x${command}" = "xcheck_mythtv_db" ] ; then
  mm_term_start /bin/su root -c "ssh -c aes128-ctr root@${MM_MASTER_SERVER_IP} /usr/local/bin/maintenance/check-optimize-db.sh; echo \"\"; echo \"Press BACK or Esc for exit...\"; read;"
  exit 0
fi


#-------------------------------------------------------------------------------

if [ "x${command}" = "xtest_network_speed" ] ; then
  mm_manage _test_network_speed &
  exit 0
fi
if [ "x${command}" = "x_test_network_speed" ] ; then
  /usr/bin/mm_test_network_speed &
  exit 0
fi


#-------------------------------------------------------------------------------

if [ "x${command}" = "xbluray_rip_start" ] ; then
  mm_manage _bluray_rip_start &
  exit 0
fi
if [ "x${command}" = "x_bluray_rip_start" ] ; then
  /usr/bin/mm_rip_bluray_start &
  exit 0
fi


#-------------------------------------------------------------------------------

if [ "x${command}" = "xbluray_copy_start" ] ; then
  mm_manage _bluray_copy_start &
  exit 0
fi
if [ "x${command}" = "x_bluray_copy_start" ] ; then
  /usr/bin/mm_copy_bluray_start &
  exit 0
fi


#-------------------------------------------------------------------------------

if [ "x${command}" = "xbluray_rip_progress" ] ; then
  mm_manage _bluray_rip_progress &
  exit 0
fi
if [ "x${command}" = "x_bluray_rip_progress" ] ; then
  /usr/bin/mm_rip_bluray_show_progress &
  exit 0
fi


#-------------------------------------------------------------------------------

if [ "x${command}" = "xbluray_rip_stop" ] ; then
  mm_manage _bluray_rip_stop &
  exit 0
fi
if [ "x${command}" = "x_bluray_rip_stop" ] ; then
  /usr/bin/mm_rip_bluray_stop &
  exit 0
fi


#-------------------------------------------------------------------------------

if [ "x${command}" = "xsend_sysinfo" ] ; then
  mm_manage _send_sysinfo &
  exit 0
fi
if [ "x${command}" = "x_send_sysinfo" ] ; then
  mm_show_mythnotify "${start_send_systeminfo_str}" '' '' '8'
  url=`cat /var/log/system-info | nc termbin.com 9999`
  if [ $? -eq 0 ] ; then
    mm_show_mythnotify "${url}" '' '' '900' "${send_systeminfo_url_str}"
  else
    mm_show_mythnotify "${start_send_systeminfo_str}" "${error_str}" 'error'
  fi
  exit 0
fi


#-------------------------------------------------------------------------------

if [ "x${command}" = "xsave_bt_connections" ] ; then
  mm_manage _save_bt_connections &
  exit 0
fi
if [ "x${command}" = "x_save_bt_connections" ] ; then
  mm_show_mythnotify "Saving Bluetooth connections ..." '' ''
  mm_bt_state_save > /tmp/tmp.out 2>&1
  if [ $? -eq 0 ] ; then
    mm_show_mythnotify "Bluetooth connections saved OK" '' 'ok'
  else
    result=`cat /tmp/tmp.out`
    mm_show_mythnotify "${error_str}" "${result}" 'error'
  fi
  exit 0
fi


#-------------------------------------------------------------------------------

if [ "x${command}" = "xshow_bt_connections" ] ; then
  mm_manage _show_bt_connections &
  exit 0
fi
if [ "x${command}" = "x_show_bt_connections" ] ; then
  mm_bt_show_all_connections > /tmp/tmp.out 2>&1
  if [ $? -ne 0 ] ; then
    result=`cat /tmp/tmp.out`
    mm_show_mythnotify "${error_str}" "${result}" 'error'
  fi
  exit 0
fi


#-------------------------------------------------------------------------------

if [ "x${command}" = "xconnect_all_bt_devices" ] ; then
  mm_manage _connect_all_bt_devices &
  exit 0
fi
if [ "x${command}" = "x_connect_all_bt_devices" ] ; then
  mm_bt_connect_all_devices > /tmp/tmp.out 2>&1
  if [ $? -ne 0 ] ; then
    result=`cat /tmp/tmp.out`
    mm_show_mythnotify "${error_str}" "${result}" 'error'
  fi
  exit 0
fi


#-------------------------------------------------------------------------------

if [ "x${command}" = "xeject_optical_drive" ] ; then
  mm_manage _eject_optical_drive &
  exit 0
fi
if [ "x${command}" = "x_eject_optical_drive" ] ; then
  /usr/bin/eject &
  exit 0
fi

#-------------------------------------------------------------------------------

if [ "x${command}" = "xnotify_added_remote" ] ; then
  mm_show_mythnotify "${new_ir_remote_connected_str}" '' 'ok' '5'
  exit 0
fi


#-------------------------------------------------------------------------------

if [ "x${command}" = "xnotify_added_input_device" ] ; then
  mm_show_mythnotify "${new_input_device_added_str}" '' 'ok' '5'
  exit 0
fi


#-------------------------------------------------------------------------------

if [ "x${command}" = "xnotify_added_storage" ] ; then
  mm_show_mythnotify "${new_storage_device_connected_str}" '' 'ok' '5'
  exit 0
fi


#-------------------------------------------------------------------------------

if [ "x${command}" = "xnotify_removed_storage" ] ; then
  mm_show_mythnotify "${storage_device_removed_str}" '' 'ok' '5'
  exit 0
fi





echo ""
echo "ERROR: Unknown command: \"${command}\""
echo ""
echo "Avalable commands:"
echo "restart_mythfrontend"
echo "restart_xserver"
echo "restart_xserver"
echo "restart_this_frontend"
echo "reload_this_system"
echo "shutdown_this_frontend"
echo "restart_mythbackend"
echo "restart_server"
echo "save_themecache"
echo "save_cookiejar"
echo "save_game"
echo "restore_game"
echo "reload_voip_config"
echo "redownload_theme"
echo "check_updates"
echo "install_updates"
echo "check_mythtv_db"
echo "test_network_speed"
echo "bluray_rip_start"
echo "bluray_copy_start"
echo "bluray_rip_progress"
echo "bluray_rip_stop"
echo "send_sysinfo"
echo "eject_optical_drive"
echo "save_bt_connections"
echo "connect_all_bt_devices"
echo "show_bt_connections"
echo ""
echo "Exiting..."
echo ""

exit 1
