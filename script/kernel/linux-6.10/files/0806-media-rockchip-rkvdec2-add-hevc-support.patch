From 3186088c38c9cc8902d3d27bcfb4b570088387c2 Mon Sep 17 00:00:00 2001
From: Detlev Casanova <detlev.casanova@collabora.com>
Date: Tue, 11 Jun 2024 17:24:46 -0400
Subject: [PATCH] wip: Add hevc support

---
 drivers/staging/media/rkvdec2/Makefile       |   2 +-
 drivers/staging/media/rkvdec2/rkvdec2-hevc.c | 571 +++++++++++++++++++
 drivers/staging/media/rkvdec2/rkvdec2.c      |  64 +++
 drivers/staging/media/rkvdec2/rkvdec2.h      |   1 +
 4 files changed, 637 insertions(+), 1 deletion(-)
 create mode 100644 drivers/staging/media/rkvdec2/rkvdec2-hevc.c

diff --git a/drivers/staging/media/rkvdec2/Makefile b/drivers/staging/media/rkvdec2/Makefile
index b5a6ac701970b..09feb3d8b6b44 100644
--- a/drivers/staging/media/rkvdec2/Makefile
+++ b/drivers/staging/media/rkvdec2/Makefile
@@ -1,3 +1,3 @@
 obj-$(CONFIG_VIDEO_ROCKCHIP_VDEC2) += rockchip-vdec2.o
 
-rockchip-vdec2-y += rkvdec2.o rkvdec2-h264.o
+rockchip-vdec2-y += rkvdec2.o rkvdec2-h264.o rkvdec2-hevc.o
diff --git a/drivers/staging/media/rkvdec2/rkvdec2-hevc.c b/drivers/staging/media/rkvdec2/rkvdec2-hevc.c
new file mode 100644
index 0000000000000..9cda2fe267033
--- /dev/null
+++ b/drivers/staging/media/rkvdec2/rkvdec2-hevc.c
@@ -0,0 +1,571 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Rockchip Video Decoder 2 HEVC backend
+ *
+ * Copyright (C) 2024 Collabora, Ltd.
+ *  Detlev Casanova <detlev.casanova@collabora.com>
+ *
+ * Based on rkvdec driver by Boris Brezillon <boris.brezillon@collabora.com>
+ */
+
+#include <media/v4l2-mem2mem.h>
+
+#include "rkvdec2.h"
+#include "rkvdec2-regs.h"
+
+// TODO: Make this common for h264/h265
+// TODO: Change to:
+//    - regmap for registers
+//    - bitfield struct for PPS/SPS
+struct rkvdec2_sps_pps_packet {
+	u32 info[28];
+};
+
+struct rkvdec2_ps_field {
+	u16 offset;
+	u8 len;
+};
+
+#define PS_FIELD(_offset, _len) \
+	((struct rkvdec2_ps_field){ _offset, _len })
+
+// SPS
+#define VIDEO_PARAMETERS_SET_ID					PS_FIELD(0, 4)
+#define SEQ_PARAMETERS_SET_ID_SPS				PS_FIELD(4, 4)
+#define CHROMA_FORMAT_IDC						PS_FIELD(8, 2)
+#define WIDTH									PS_FIELD(10, 16)
+#define HEIGHT									PS_FIELD(26, 16)
+#define BIT_DEPTH_LUMA							PS_FIELD(42, 4)
+#define BIT_DEPTH_CHROMA						PS_FIELD(46, 4)
+#define MAX_PIC_ORDER_COUNT_LSB					PS_FIELD(50, 5)
+#define DIFF_MAX_MIN_LUMA_CODING_BLOCK_SIZE		PS_FIELD(55, 2)
+#define MIN_LUMA_CODING_BLOCK_SIZE				PS_FIELD(57, 3)
+#define MIN_TRANSFORM_BLOCK_SIZE				PS_FIELD(60, 3)
+#define DIFF_MAX_MIN_TRANSFORM_BLOCK_SIZE		PS_FIELD(63, 2)
+#define MAX_TRANSFORM_HIERARCHY_DEPTH_INTER		PS_FIELD(65, 3)
+#define MAX_TRANSFORM_HIERARCHY_DEPTH_INTRA		PS_FIELD(68, 3)
+#define SCALING_LIST_ENABLED_FLAG				PS_FIELD(71, 1)
+#define AMP_ENABLED_FLAG						PS_FIELD(72, 1)
+#define SAMPLE_ADAPTIVE_OFFSET_ENABLED_FLAG		PS_FIELD(73, 1)
+#define PCM_ENABLED_FLAG						PS_FIELD(74, 1)
+#define PCM_SAMPLE_BIT_DEPTH_LUMA				PS_FIELD(75, 4)
+#define PCM_SAMPLE_BIT_DEPTH_CHROMA				PS_FIELD(79, 4)
+#define PCM_LOOP_FILTER_DISABLED_FLAG			PS_FIELD(83, 1)
+#define DIFF_MAX_MIN_PCM_LUMA_CODING_BLOCK_SIZE	PS_FIELD(84, 3)
+#define MIN_PCM_LUMA_CODING_BLOCK_SIZE			PS_FIELD(87, 3)
+#define NUM_SHORT_TERM_REF_PIC_SETS				PS_FIELD(90, 7)
+#define LONG_TERM_REF_PICS_PRESENT_FLAG			PS_FIELD(97, 1)
+#define NUM_LONG_TERM_REF_PICS_SPS				PS_FIELD(98, 6)
+#define SPS_TEMPORAL_MVP_ENABLED_FLAG			PS_FIELD(104, 1)
+#define STRONG_INTRA_SMOOTHING_ENABLED_FLAG		PS_FIELD(105, 1)
+// --- ADD 7 BITS OF 0 (MPP_PUT_BITS(&BP, 0, 7 );)
+// 108 BITS
+// --- ALIGN ON 32 BITS, PADDING HAS TO BE SET TO 0XF
+// 128 (4*32)
+
+//PPS
+#define PICTURE_PARAMETERS_SET_ID					PS_FIELD(128, 6)
+#define SEQ_PARAMETERS_SET_ID_PPS					PS_FIELD(134, 4)
+#define DEPENDENT_SLICE_SEGMENTS_ENABLED_FLAG		PS_FIELD(138, 1)
+#define OUTPUT_FLAG_PRESENT_FLAG					PS_FIELD(139, 1)
+#define NUM_EXTRA_SLICE_HEADER_BITS					PS_FIELD(140, 13)
+#define SIGN_DATA_HIDING_ENABLED_FLAG				PS_FIELD(153, 1)
+#define CABAC_INIT_PRESENT_FLAG						PS_FIELD(154, 1)
+#define NUM_REF_IDX_L0_DEFAULT_ACTIVE				PS_FIELD(155, 4)
+#define NUM_REF_IDX_L1_DEFAULT_ACTIVE				PS_FIELD(159, 4)
+#define INIT_QP_MINUS26								PS_FIELD(163, 7)
+#define CONSTRAINED_INTRA_PRED_FLAG					PS_FIELD(170, 1)
+#define TRANSFORM_SKIP_ENABLED_FLAG					PS_FIELD(171, 1)
+#define CU_QP_DELTA_ENABLED_FLAG					PS_FIELD(172, 1)
+#define LOG2_MIN_CB_SIZE							PS_FIELD(175, 3)
+#define PPS_CB_QP_OFFSET							PS_FIELD(178, 5)
+#define PPS_CR_QP_OFFSET							PS_FIELD(183, 5)
+#define PPS_SLICE_CHROMA_QP_OFFSETS_PRESENT_FLAG	PS_FIELD(188, 1)
+#define WEIGHTED_PRED_FLAG							PS_FIELD(189, 1)
+#define WEIGHTED_BIPRED_FLAG						PS_FIELD(190, 1)
+#define TRANSQUANT_BYPASS_ENABLED_FLAG				PS_FIELD(191, 1)
+#define TILES_ENABLED_FLAG							PS_FIELD(192, 1)
+#define ENTROPY_CODING_SYNC_ENABLED_FLAG			PS_FIELD(193, 1)
+#define PPS_LOOP_FILTER_ACROSS_SLICES_ENABLED_FLAG	PS_FIELD(194, 1)
+#define LOOP_FILTER_ACROSS_TILES_ENABLED_FLAG		PS_FIELD(195, 1)
+#define DEBLOCKING_FILTER_OVERRIDE_ENABLED_FLAG		PS_FIELD(196, 1)
+#define PPS_DEBLOCKING_FILTER_DISABLED_FLAG			PS_FIELD(197, 1)
+#define PPS_BETA_OFFSET_DIV2						PS_FIELD(198, 4)
+#define PPS_TC_OFFSET_DIV2							PS_FIELD(202, 4)
+#define LISTS_MODIFICATION_PRESENT_FLAG				PS_FIELD(206, 1)
+#define LOG2_PARALLEL_MERGE_LEVEL					PS_FIELD(207, 3)
+#define SLICE_SEGMENT_HEADER_EXTENSION_PRESENT_FLAG	PS_FIELD(210, 1)
+#define NUM_TILE_COLUMNS							PS_FIELD(214, 5)
+#define NUM_TILE_ROWS								PS_FIELD(219, 5)
+#define SPS_PPS_MODE								PS_FIELD(224, 2)
+
+// 226 bits
+// --- ALIGN on 64 bits, padding has to be set to 0xf
+// 256 (4*64)
+// Tile info (TBC)
+
+
+#define COLUMN_WIDTH(i)					PS_FIELD(256 + 12 * (i), 12)	// 20 entries
+#define ROW_HEIGHT(i)					PS_FIELD(496 + 12 * (i), 12)	// 22 entries
+// 760 bits
+
+#define SOME_ADDR					PS_FIELD(760, 32)
+
+// 796 bits
+// --- ALIGN on 64 bits, padding has to be set to 0xf
+// 832 (13*64)
+
+/* Data structure describing auxiliary buffer format. */
+struct rkvdec2_hevc_priv_tbl {
+	u32 cabac_table[928];
+	struct rkvdec2_sps_pps_packet param_set[256];
+	/*struct rkvdec2_hevc_scaling_list scaling_list;
+	u32 rps[RKV_RPS_SIZE];
+	u8 err_info[RKV_ERROR_INFO_SIZE];*/
+};
+/*
+struct rkvdec2_hevc_reflists {
+	struct v4l2_hevc_reference p[V4L2_HEVC_];
+	struct v4l2_hevc_reference b0[V4L2_HEVC_REF_LIST_LEN];
+	struct v4l2_hevc_reference b1[V4L2_HEVC_REF_LIST_LEN];
+};*/
+
+struct rkvdec2_hevc_run {
+	struct rkvdec2_run 							base;
+	const struct v4l2_ctrl_hevc_decode_params 	*decode_params;
+	const struct v4l2_ctrl_hevc_sps 			*sps;
+	const struct v4l2_ctrl_hevc_pps 			*pps;
+	const struct v4l2_ctrl_hevc_scaling_matrix 	*scaling_matrix;
+	struct vb2_buffer *ref_buf[V4L2_HEVC_DPB_ENTRIES_NUM_MAX];
+};
+
+struct rkvdec2_hevc_ctx {
+	struct rkvdec2_aux_buf 		priv_tbl;
+};
+
+static void rkvdec2_write_reg(struct rkvdec2_dev *rkvdec, u32 val, u32 offset) {
+	dev_dbg(rkvdec->dev, "write reg[%03d]: %04x: 0x%08x\n", offset/4, offset, val);
+	writel(val, rkvdec->regs + offset);
+}
+
+static void set_ps_field(u32 *buf, struct rkvdec2_ps_field field, u32 value)
+{
+	u8 bit = field.offset % 32, word = field.offset / 32;
+	u64 mask = GENMASK_ULL(bit + field.len - 1, bit);
+	u64 val = ((u64)value << bit) & mask;
+
+	buf[word] &= ~mask;
+	buf[word] |= val;
+	if (bit + field.len > 32) {
+		buf[word + 1] &= ~(mask >> 32);
+		buf[word + 1] |= val >> 32;
+	}
+}
+
+static void dump_pps_sps(struct device *dev,
+	struct rkvdec2_sps_pps_packet *ps) {
+		for (int i = 0; i < 12; i++)
+			dev_dbg(dev, "PPS[%d] = 0x%08x\n", i, ps->info[i]);
+}
+
+static void dump_rps(struct device *dev, u32 *ps) {
+		for (int i = 0; i < 96; i++)
+			dev_dbg(dev, "RPS[%d] = 0x%08x\n", i, ps[i]);
+}
+
+static void assemble_hw_pps(struct rkvdec2_ctx *ctx,
+			    struct rkvdec2_hevc_run *run)
+{
+	struct rkvdec2_hevc_ctx *h264_ctx = ctx->priv;
+	const struct v4l2_ctrl_hevc_sps *sps = run->sps;
+	const struct v4l2_ctrl_hevc_pps *pps = run->pps;
+	const struct v4l2_ctrl_hevc_decode_params *dec_params = run->decode_params;
+	const struct v4l2_hevc_dpb_entry *dpb = dec_params->dpb;
+	struct rkvdec2_hevc_priv_tbl *priv_tbl = h264_ctx->priv_tbl.cpu;
+	struct rkvdec2_sps_pps_packet *hw_ps;
+	dma_addr_t scaling_list_address;
+	u32 scaling_distance;
+	u32 i;
+	u8 pcm_enabled;
+	u16 log2_min_cb_size, width, height;
+
+	/*
+	 * HW read the SPS/PPS information from PPS packet index by PPS id.
+	 * offset from the base can be calculated by PPS_id * 32 (size per PPS
+	 * packet unit). so the driver copy SPS/PPS information to the exact PPS
+	 * packet unit for HW accessing.
+	 */
+	hw_ps = &priv_tbl->param_set[pps->pic_parameter_set_id];
+	memset(hw_ps, 0, sizeof(*hw_ps));
+
+#define WRITE_PPS(value, field) set_ps_field(hw_ps->info, field, value)
+	/* write sps */
+	WRITE_PPS(sps->video_parameter_set_id, VIDEO_PARAMETERS_SET_ID);
+	WRITE_PPS(sps->seq_parameter_set_id, SEQ_PARAMETERS_SET_ID_SPS);
+	WRITE_PPS(sps->chroma_format_idc, CHROMA_FORMAT_IDC);
+
+	// TODO: TBC
+	log2_min_cb_size = sps->log2_min_luma_coding_block_size_minus3 + 3;
+    width = (sps->pic_width_in_luma_samples << log2_min_cb_size);
+    height = (sps->pic_width_in_luma_samples << log2_min_cb_size);
+	WRITE_PPS(width, WIDTH);
+	WRITE_PPS(height, HEIGHT);
+	WRITE_PPS(sps->bit_depth_luma_minus8 + 8, BIT_DEPTH_LUMA);
+	WRITE_PPS(sps->bit_depth_chroma_minus8 + 8, BIT_DEPTH_CHROMA);
+	WRITE_PPS(sps->log2_max_pic_order_cnt_lsb_minus4 + 4, MAX_PIC_ORDER_COUNT_LSB);
+	WRITE_PPS(sps->log2_diff_max_min_luma_coding_block_size, DIFF_MAX_MIN_LUMA_CODING_BLOCK_SIZE);
+	WRITE_PPS(sps->log2_min_luma_coding_block_size_minus3 + 3, MIN_LUMA_CODING_BLOCK_SIZE);
+	WRITE_PPS(sps->log2_min_luma_transform_block_size_minus2 + 2, MIN_TRANSFORM_BLOCK_SIZE);
+	WRITE_PPS(sps->log2_diff_max_min_luma_transform_block_size, DIFF_MAX_MIN_TRANSFORM_BLOCK_SIZE);
+	WRITE_PPS(sps->max_transform_hierarchy_depth_inter, MAX_TRANSFORM_HIERARCHY_DEPTH_INTER);
+	WRITE_PPS(sps->max_transform_hierarchy_depth_intra, MAX_TRANSFORM_HIERARCHY_DEPTH_INTRA);
+	WRITE_PPS(!!(sps->flags & V4L2_HEVC_SPS_FLAG_SCALING_LIST_ENABLED), SCALING_LIST_ENABLED_FLAG);
+	WRITE_PPS(!!(sps->flags & V4L2_HEVC_SPS_FLAG_AMP_ENABLED), AMP_ENABLED_FLAG);
+	WRITE_PPS(!!(sps->flags & V4L2_HEVC_SPS_FLAG_SAMPLE_ADAPTIVE_OFFSET), SAMPLE_ADAPTIVE_OFFSET_ENABLED_FLAG);
+
+	pcm_enabled = !!(sps->flags & V4L2_HEVC_SPS_FLAG_PCM_ENABLED);
+	WRITE_PPS(pcm_enabled, PCM_ENABLED_FLAG);
+	WRITE_PPS(pcm_enabled ? sps->pcm_sample_bit_depth_luma_minus1 + 1 : 0, PCM_SAMPLE_BIT_DEPTH_LUMA);
+	WRITE_PPS(pcm_enabled ? sps->pcm_sample_bit_depth_chroma_minus1 + 1 : 0, PCM_SAMPLE_BIT_DEPTH_CHROMA);
+	WRITE_PPS(!!(sps->flags & V4L2_HEVC_SPS_FLAG_PCM_LOOP_FILTER_DISABLED), PCM_LOOP_FILTER_DISABLED_FLAG);
+	WRITE_PPS(sps->log2_diff_max_min_pcm_luma_coding_block_size, DIFF_MAX_MIN_PCM_LUMA_CODING_BLOCK_SIZE);
+	WRITE_PPS(sps->log2_min_pcm_luma_coding_block_size_minus3 + 3, MIN_PCM_LUMA_CODING_BLOCK_SIZE);
+	WRITE_PPS(sps->num_short_term_ref_pic_sets, NUM_SHORT_TERM_REF_PIC_SETS);
+	WRITE_PPS(!!(sps->flags & V4L2_HEVC_SPS_FLAG_LONG_TERM_REF_PICS_PRESENT), LONG_TERM_REF_PICS_PRESENT_FLAG);
+	WRITE_PPS(sps->num_long_term_ref_pics_sps, NUM_LONG_TERM_REF_PICS_SPS);
+	WRITE_PPS(!!(sps->flags & V4L2_HEVC_SPS_FLAG_SPS_TEMPORAL_MVP_ENABLED), SPS_TEMPORAL_MVP_ENABLED_FLAG);
+	WRITE_PPS(!!(sps->flags & V4L2_HEVC_SPS_FLAG_STRONG_INTRA_SMOOTHING_ENABLED), STRONG_INTRA_SMOOTHING_ENABLED_FLAG);
+
+	//TODO: Should fill gap here with 0xff to match MPP
+
+	/* write pps */
+	WRITE_PPS(pps->pic_parameter_set_id, PICTURE_PARAMETERS_SET_ID);
+	WRITE_PPS(sps->seq_parameter_set_id, SEQ_PARAMETERS_SET_ID_PPS);
+	WRITE_PPS(!!(pps->flags & V4L2_HEVC_PPS_FLAG_DEPENDENT_SLICE_SEGMENT_ENABLED), DEPENDENT_SLICE_SEGMENTS_ENABLED_FLAG);
+	WRITE_PPS(!!(pps->flags & V4L2_HEVC_PPS_FLAG_OUTPUT_FLAG_PRESENT), OUTPUT_FLAG_PRESENT_FLAG);
+	WRITE_PPS(pps->num_extra_slice_header_bits, NUM_EXTRA_SLICE_HEADER_BITS);
+	WRITE_PPS(!!(pps->flags & V4L2_HEVC_PPS_FLAG_SIGN_DATA_HIDING_ENABLED), SIGN_DATA_HIDING_ENABLED_FLAG);
+	WRITE_PPS(!!(pps->flags & V4L2_HEVC_PPS_FLAG_CABAC_INIT_PRESENT), CABAC_INIT_PRESENT_FLAG);
+	WRITE_PPS(pps->num_ref_idx_l0_default_active_minus1 + 1, NUM_REF_IDX_L0_DEFAULT_ACTIVE);
+	WRITE_PPS(pps->num_ref_idx_l1_default_active_minus1 + 1, NUM_REF_IDX_L1_DEFAULT_ACTIVE);
+	WRITE_PPS(pps->init_qp_minus26, INIT_QP_MINUS26);
+	WRITE_PPS(!!(pps->flags & V4L2_HEVC_PPS_FLAG_CONSTRAINED_INTRA_PRED), CONSTRAINED_INTRA_PRED_FLAG);
+	WRITE_PPS(!!(pps->flags & V4L2_HEVC_PPS_FLAG_TRANSFORM_SKIP_ENABLED), TRANSFORM_SKIP_ENABLED_FLAG);
+	WRITE_PPS(!!(pps->flags & V4L2_HEVC_PPS_FLAG_CU_QP_DELTA_ENABLED), CU_QP_DELTA_ENABLED_FLAG);
+	WRITE_PPS(log2_min_cb_size + sps->log2_diff_max_min_luma_coding_block_size - pps->diff_cu_qp_delta_depth, LOG2_MIN_CB_SIZE);
+	WRITE_PPS(pps->pps_cb_qp_offset, PPS_CB_QP_OFFSET);
+	WRITE_PPS(pps->pps_cr_qp_offset, PPS_CR_QP_OFFSET);
+	WRITE_PPS(!!(pps->flags & V4L2_HEVC_PPS_FLAG_PPS_SLICE_CHROMA_QP_OFFSETS_PRESENT), PPS_SLICE_CHROMA_QP_OFFSETS_PRESENT_FLAG);
+	WRITE_PPS(!!(pps->flags & V4L2_HEVC_PPS_FLAG_WEIGHTED_PRED), WEIGHTED_PRED_FLAG);
+	WRITE_PPS(!!(pps->flags & V4L2_HEVC_PPS_FLAG_WEIGHTED_BIPRED), WEIGHTED_BIPRED_FLAG);
+	WRITE_PPS(!!(pps->flags & V4L2_HEVC_PPS_FLAG_TRANSQUANT_BYPASS_ENABLED), TRANSQUANT_BYPASS_ENABLED_FLAG);
+	WRITE_PPS(!!(pps->flags & V4L2_HEVC_PPS_FLAG_TILES_ENABLED), TILES_ENABLED_FLAG);
+	WRITE_PPS(!!(pps->flags & V4L2_HEVC_PPS_FLAG_ENTROPY_CODING_SYNC_ENABLED), ENTROPY_CODING_SYNC_ENABLED_FLAG);
+	WRITE_PPS(!!(pps->flags & V4L2_HEVC_PPS_FLAG_PPS_LOOP_FILTER_ACROSS_SLICES_ENABLED), PPS_LOOP_FILTER_ACROSS_SLICES_ENABLED_FLAG);
+	WRITE_PPS(!!(pps->flags & V4L2_HEVC_PPS_FLAG_LOOP_FILTER_ACROSS_TILES_ENABLED), LOOP_FILTER_ACROSS_TILES_ENABLED_FLAG);
+	WRITE_PPS(!!(pps->flags & V4L2_HEVC_PPS_FLAG_DEBLOCKING_FILTER_OVERRIDE_ENABLED), DEBLOCKING_FILTER_OVERRIDE_ENABLED_FLAG);
+	WRITE_PPS(!!(pps->flags & V4L2_HEVC_PPS_FLAG_PPS_DISABLE_DEBLOCKING_FILTER), PPS_DEBLOCKING_FILTER_DISABLED_FLAG);
+	WRITE_PPS(pps->pps_beta_offset_div2, PPS_BETA_OFFSET_DIV2);
+	WRITE_PPS(pps->pps_tc_offset_div2, PPS_TC_OFFSET_DIV2);
+	WRITE_PPS(!!(pps->flags & V4L2_HEVC_PPS_FLAG_LISTS_MODIFICATION_PRESENT), LISTS_MODIFICATION_PRESENT_FLAG);
+	WRITE_PPS(pps->log2_parallel_merge_level_minus2 + 2, LOG2_PARALLEL_MERGE_LEVEL);
+	WRITE_PPS(!!(pps->flags & V4L2_HEVC_PPS_FLAG_SLICE_SEGMENT_HEADER_EXTENSION_PRESENT), SLICE_SEGMENT_HEADER_EXTENSION_PRESENT_FLAG);
+	WRITE_PPS(pps->num_tile_columns_minus1 + 1, NUM_TILE_COLUMNS);
+	WRITE_PPS(pps->num_tile_rows_minus1 + 1, NUM_TILE_ROWS);
+	WRITE_PPS(0, SPS_PPS_MODE);
+
+	//TODO: Should fill gap here with 0xff to match MPP
+	// TODO: Fill col_width and row_heights
+
+	// Setup tiles information (Move computation to another function)
+	u16 column_width[20];
+	u16 row_height[22];
+
+	memset(column_width, 0, sizeof(column_width));
+	memset(row_height, 0, sizeof(row_height));
+
+	if (!!(pps->flags & V4L2_HEVC_PPS_FLAG_TILES_ENABLED)) {
+		if (!(pps->flags & V4L2_HEVC_PPS_FLAG_UNIFORM_SPACING)) {
+			s32 maxcuwidth =
+				sps->log2_diff_max_min_luma_coding_block_size +
+				log2_min_cb_size;
+			s32 ctu_width_in_pic = (width + (1 << maxcuwidth) - 1) /
+					       (1 << maxcuwidth);
+			s32 ctu_height_in_pic =
+				(height + (1 << maxcuwidth) - 1) /
+				(1 << maxcuwidth);
+			s32 sum = 0;
+			for (i = 0; i < pps->num_tile_columns_minus1;
+			     i++) {
+				column_width[i] =
+					pps->column_width_minus1[i] + 1;
+				sum += column_width[i];
+			}
+			column_width[i] = ctu_width_in_pic - sum;
+
+			sum = 0;
+			for (i = 0; i < pps->num_tile_rows_minus1;
+			     i++) {
+				row_height[i] =
+					pps->row_height_minus1[i] + 1;
+				sum += row_height[i];
+			}
+			row_height[i] = ctu_height_in_pic - sum;
+		} // end of (pps->uniform_spacing_flag == 0)
+		else {
+			s32 pic_in_cts_width =
+				(width +
+				 (1
+				  << (log2_min_cb_size +
+				      sps->log2_diff_max_min_luma_coding_block_size)) -
+				 1) /
+				(1
+				 << (log2_min_cb_size +
+				     sps->log2_diff_max_min_luma_coding_block_size));
+			s32 pic_in_cts_height =
+				(height +
+				 (1
+				  << (log2_min_cb_size +
+				      sps->log2_diff_max_min_luma_coding_block_size)) -
+				 1) /
+				(1
+				 << (log2_min_cb_size +
+				     sps->log2_diff_max_min_luma_coding_block_size));
+
+			for (i = 0;
+			     i < pps->num_tile_columns_minus1 + 1; i++)
+				column_width[i] =
+					((i + 1) * pic_in_cts_width) /
+						(pps->num_tile_columns_minus1 +
+						 1) -
+					(i * pic_in_cts_width) /
+						(pps->num_tile_columns_minus1 +
+						 1);
+
+			for (i = 0; i < pps->num_tile_rows_minus1 + 1;
+			     i++)
+				row_height[i] =
+					((i + 1) * pic_in_cts_height) /
+						(pps->num_tile_rows_minus1 +
+						 1) -
+					(i * pic_in_cts_height) /
+						(pps->num_tile_rows_minus1 +
+						 1);
+		}
+	} // pps->tiles_enabled_flag
+	else {
+		s32 MaxCUWidth =
+			(1
+			 << (sps->log2_diff_max_min_luma_coding_block_size +
+			     log2_min_cb_size));
+		column_width[0] = (width + MaxCUWidth - 1) / MaxCUWidth;
+		row_height[0] = (height + MaxCUWidth - 1) / MaxCUWidth;
+	}
+
+	for (i = 0; i < 20; i++) {
+		if (column_width[i] > 0)
+			column_width[i]--;
+
+		WRITE_PPS(column_width[i], COLUMN_WIDTH(i));
+	}
+
+	for (i = 0; i < 22; i++) {
+		if (row_height[i] > 0)
+			row_height[i]--;
+		WRITE_PPS(row_height[i], ROW_HEIGHT(i));
+	}
+}
+
+static void config_registers(struct rkvdec2_ctx *ctx,
+			     struct rkvdec2_hevc_run *run)
+{
+	struct rkvdec2_dev *rkvdec = ctx->dev;
+	const struct v4l2_ctrl_hevc_decode_params *dec_params = run->decode_params;
+	const struct v4l2_ctrl_hevc_sps *sps = run->sps;
+	const struct v4l2_hevc_dpb_entry *dpb = dec_params->dpb;
+	struct rkvdec2_hevc_ctx *hevc_ctx = ctx->priv;
+	dma_addr_t priv_start_addr = hevc_ctx->priv_tbl.dma;
+	const struct v4l2_pix_format_mplane *dst_fmt;
+	struct vb2_v4l2_buffer *src_buf = run->base.bufs.src;
+	struct vb2_v4l2_buffer *dst_buf = run->base.bufs.dst;
+	const struct v4l2_format *f;
+	u32 pic_info[4];
+	dma_addr_t rlc_addr;
+	u32 hor_virstride = 0;
+	u32 ver_virstride = 0;
+	u32 y_virstride = 0;
+	u32 yuv_virstride = 0;
+	u32 offset;
+	u32 pixels;
+	dma_addr_t dst_addr;
+	u32 i;
+	
+}
+
+#define RKVDEC_HEVC_MAX_DEPTH_IN_BYTES		2
+
+static int rkvdec2_hevc_adjust_fmt(struct rkvdec2_ctx *ctx,
+				  struct v4l2_format *f)
+{
+	struct v4l2_pix_format_mplane *fmt = &f->fmt.pix_mp;
+
+	fmt->num_planes = 1;
+	if (!fmt->plane_fmt[0].sizeimage)
+		fmt->plane_fmt[0].sizeimage = fmt->width * fmt->height *
+					      RKVDEC_HEVC_MAX_DEPTH_IN_BYTES;
+	return 0;
+}
+
+static int rkvdec2_hevc_validate_sps(struct rkvdec2_ctx *ctx,
+				    const struct v4l2_ctrl_hevc_sps *sps)
+{
+	unsigned int width, height;
+
+	/* FIXME: TBC
+	 * TODO: The hardware supports 10-bit and 4:2:2 profiles,
+	 * but it's currently broken in the driver.
+	 * Reject them for now, until it's fixed.
+	 */
+	if (sps->chroma_format_idc > 1)
+		/* Only 4:0:0 and 4:2:0 are supported */
+		return -EINVAL;
+	if (sps->bit_depth_luma_minus8 != sps->bit_depth_chroma_minus8)
+		/* Luma and chroma bit depth mismatch */
+		return -EINVAL;
+	if (sps->bit_depth_luma_minus8 != 0)
+		/* Only 8-bit is supported */
+		return -EINVAL;
+
+	width = (sps->pic_width_in_luma_samples + 1) * 16;
+	height = (sps->pic_height_in_luma_samples + 1) * 16;
+
+	if (width > ctx->coded_fmt.fmt.pix_mp.width ||
+	    height > ctx->coded_fmt.fmt.pix_mp.height)
+		return -EINVAL;
+
+	return 0;
+}
+
+static int rkvdec2_hevc_start(struct rkvdec2_ctx *ctx)
+{
+	struct rkvdec2_dev *rkvdec = ctx->dev;
+	struct rkvdec2_hevc_priv_tbl *priv_tbl;
+	struct rkvdec2_hevc_ctx *hevc_ctx;
+	struct v4l2_ctrl *ctrl;
+	int ret;
+
+	ctrl = v4l2_ctrl_find(&ctx->ctrl_hdl,
+			      V4L2_CID_STATELESS_HEVC_SPS);
+	if (!ctrl)
+		return -EINVAL;
+
+	ret = rkvdec2_hevc_validate_sps(ctx, ctrl->p_new.p_hevc_sps);
+	if (ret)
+		return ret;
+
+	hevc_ctx = kzalloc(sizeof(*hevc_ctx), GFP_KERNEL);
+	if (!hevc_ctx) {
+		dev_err(rkvdec->dev, "Cannot allocate hevc ctx\n");
+		return -ENOMEM;
+	}
+
+	priv_tbl = dma_alloc_coherent(rkvdec->dev, sizeof(*priv_tbl),
+				      &hevc_ctx->priv_tbl.dma, GFP_KERNEL);
+	if (!priv_tbl) {
+		dev_err(rkvdec->dev, "Cannot allocate DMA coherent memory\n");
+		ret = -ENOMEM;
+		goto err_free_ctx;
+	}
+
+	hevc_ctx->priv_tbl.size = sizeof(*priv_tbl);
+	hevc_ctx->priv_tbl.cpu = priv_tbl;
+	//memcpy(priv_tbl->cabac_table, rkvdec2_hevc_cabac_table,
+	       //sizeof(rkvdec2_hevc_cabac_table));
+
+	ctx->priv = hevc_ctx;
+	return 0;
+
+err_free_ctx:
+	kfree(hevc_ctx);
+	return ret;
+}
+
+static void rkvdec2_hevc_stop(struct rkvdec2_ctx *ctx)
+{
+	struct rkvdec2_hevc_ctx *hevc_ctx = ctx->priv;
+	struct rkvdec2_dev *rkvdec = ctx->dev;
+
+	dma_free_coherent(rkvdec->dev, hevc_ctx->priv_tbl.size,
+			  hevc_ctx->priv_tbl.cpu, hevc_ctx->priv_tbl.dma);
+	kfree(hevc_ctx);
+}
+
+static void rkvdec2_hevc_run_preamble(struct rkvdec2_ctx *ctx,
+				     struct rkvdec2_hevc_run *run)
+{
+	struct v4l2_ctrl *ctrl;
+
+	ctrl = v4l2_ctrl_find(&ctx->ctrl_hdl,
+			      V4L2_CID_STATELESS_HEVC_DECODE_PARAMS);
+	run->decode_params = ctrl ? ctrl->p_cur.p : NULL;
+	ctrl = v4l2_ctrl_find(&ctx->ctrl_hdl,
+			      V4L2_CID_STATELESS_HEVC_SPS);
+	run->sps = ctrl ? ctrl->p_cur.p : NULL;
+	ctrl = v4l2_ctrl_find(&ctx->ctrl_hdl,
+			      V4L2_CID_STATELESS_HEVC_PPS);
+	run->pps = ctrl ? ctrl->p_cur.p : NULL;
+	ctrl = v4l2_ctrl_find(&ctx->ctrl_hdl,
+			      V4L2_CID_STATELESS_HEVC_SCALING_MATRIX);
+	run->scaling_matrix = ctrl ? ctrl->p_cur.p : NULL;
+
+	rkvdec2_run_preamble(ctx, &run->base);
+}
+
+static int rkvdec2_hevc_run(struct rkvdec2_ctx *ctx)
+{
+	//struct v4l2_hevc_reflist_builder reflist_builder;
+	struct rkvdec2_dev *rkvdec = ctx->dev;
+	struct rkvdec2_hevc_ctx *hevc_ctx = ctx->priv;
+	struct rkvdec2_hevc_run run;
+
+	rkvdec2_hevc_run_preamble(ctx, &run);
+	
+	/* Build the P/B{0,1} ref lists. */
+	/*v4l2_hevc_init_reflist_builder(&reflist_builder, run.decode_params,
+				       run.sps, run.decode_params->dpb);
+	v4l2_hevc_build_p_ref_list(&reflist_builder, hevc_ctx->reflists.p);
+	v4l2_hevc_build_b_ref_lists(&reflist_builder, hevc_ctx->reflists.b0,
+				    hevc_ctx->reflists.b1);
+	*/
+	//assemble_hw_scaling_list(ctx, &run);
+	assemble_hw_pps(ctx, &run);
+	//lookup_ref_buf_idx(ctx, &run);
+	//assemble_hw_rps(ctx, &reflist_builder, &run);
+
+	config_registers(ctx, &run);
+
+	rkvdec2_run_postamble(ctx, &run.base);
+
+	schedule_delayed_work(&rkvdec->watchdog_work, msecs_to_jiffies(2000));
+
+	/* Start decoding! */
+	//rkvdec2_write_reg(rkvdec, 1, SWREG10_DEC_E);
+
+	return 0;
+}
+
+static int rkvdec2_hevc_try_ctrl(struct rkvdec2_ctx *ctx, struct v4l2_ctrl *ctrl)
+{
+	if (ctrl->id == V4L2_CID_STATELESS_HEVC_SPS)
+		return rkvdec2_hevc_validate_sps(ctx, ctrl->p_new.p_hevc_sps);
+
+	return 0;
+}
+
+const struct rkvdec2_coded_fmt_ops rkvdec2_hevc_fmt_ops = {
+	.adjust_fmt = rkvdec2_hevc_adjust_fmt,
+	.start = rkvdec2_hevc_start,
+	.stop = rkvdec2_hevc_stop,
+	.run = rkvdec2_hevc_run,
+	.try_ctrl = rkvdec2_hevc_try_ctrl,
+};
diff --git a/drivers/staging/media/rkvdec2/rkvdec2.c b/drivers/staging/media/rkvdec2/rkvdec2.c
index 7163a9c16a0f9..83068201d17e3 100644
--- a/drivers/staging/media/rkvdec2/rkvdec2.c
+++ b/drivers/staging/media/rkvdec2/rkvdec2.c
@@ -81,15 +81,63 @@ static const struct rkvdec2_ctrl_desc rkvdec2_h264_ctrl_descs[] = {
 	},
 };
 
+static const struct rkvdec2_ctrl_desc rkvdec2_hevc_ctrl_descs[] = {
+	{
+		.cfg.id = V4L2_CID_STATELESS_HEVC_DECODE_PARAMS,
+	},
+	{
+		.cfg.id = V4L2_CID_STATELESS_HEVC_SPS,
+		.cfg.ops = &rkvdec2_ctrl_ops,
+	},
+	{
+		.cfg.id = V4L2_CID_STATELESS_HEVC_PPS,
+	},
+	{
+		.cfg.id = V4L2_CID_STATELESS_HEVC_SCALING_MATRIX,
+	},
+	{
+		.cfg.id = V4L2_CID_STATELESS_HEVC_DECODE_MODE,
+		.cfg.min = V4L2_STATELESS_HEVC_DECODE_MODE_FRAME_BASED,
+		.cfg.max = V4L2_STATELESS_HEVC_DECODE_MODE_FRAME_BASED,
+		.cfg.def = V4L2_STATELESS_HEVC_DECODE_MODE_FRAME_BASED,
+	},
+	{
+		.cfg.id = V4L2_CID_STATELESS_HEVC_START_CODE,
+		.cfg.min = V4L2_STATELESS_HEVC_START_CODE_ANNEX_B,
+		.cfg.def = V4L2_STATELESS_HEVC_START_CODE_ANNEX_B,
+		.cfg.max = V4L2_STATELESS_HEVC_START_CODE_ANNEX_B,
+	},
+	{
+		.cfg.id = V4L2_CID_MPEG_VIDEO_HEVC_PROFILE,
+		.cfg.min = V4L2_MPEG_VIDEO_HEVC_PROFILE_MAIN,
+		.cfg.max = V4L2_MPEG_VIDEO_H264_PROFILE_HIGH_10,
+		.cfg.def = V4L2_MPEG_VIDEO_H264_PROFILE_MAIN,
+	},
+	{
+		.cfg.id = V4L2_CID_MPEG_VIDEO_HEVC_LEVEL,
+		.cfg.min = V4L2_MPEG_VIDEO_HEVC_LEVEL_1,
+		.cfg.max = V4L2_MPEG_VIDEO_HEVC_LEVEL_6_1,
+	},
+};
+
 static const struct rkvdec2_ctrls rkvdec2_h264_ctrls = {
 	.ctrls = rkvdec2_h264_ctrl_descs,
 	.num_ctrls = ARRAY_SIZE(rkvdec2_h264_ctrl_descs),
 };
 
+static const struct rkvdec2_ctrls rkvdec2_hevc_ctrls = {
+	.ctrls = rkvdec2_hevc_ctrl_descs,
+	.num_ctrls = ARRAY_SIZE(rkvdec2_hevc_ctrl_descs),
+};
+
 static const u32 rkvdec2_h264_decoded_fmts[] = {
 	V4L2_PIX_FMT_NV12
 };
 
+static const u32 rkvdec2_hevc_decoded_fmts[] = {
+	V4L2_PIX_FMT_NV12
+};
+
 static const struct rkvdec2_coded_fmt_desc rkvdec2_coded_fmts[] = {
 	{
 		.fourcc = V4L2_PIX_FMT_H264_SLICE,
@@ -107,6 +155,22 @@ static const struct rkvdec2_coded_fmt_desc rkvdec2_coded_fmts[] = {
 		.decoded_fmts = rkvdec2_h264_decoded_fmts,
 		.subsystem_flags = VB2_V4L2_FL_SUPPORTS_M2M_HOLD_CAPTURE_BUF,
 	},
+	{
+		.fourcc = V4L2_PIX_FMT_HEVC_SLICE,
+		.frmsize = {
+			.min_width = 16,
+			.max_width = 65472,
+			.step_width = 16,
+			.min_height = 16,
+			.max_height = 65472,
+			.step_height = 16,
+		},
+		.ctrls = &rkvdec2_hevc_ctrls,
+		.ops = &rkvdec2_hevc_fmt_ops,
+		.num_decoded_fmts = ARRAY_SIZE(rkvdec2_hevc_decoded_fmts),
+		.decoded_fmts = rkvdec2_hevc_decoded_fmts,
+		.subsystem_flags = VB2_V4L2_FL_SUPPORTS_M2M_HOLD_CAPTURE_BUF,
+	},
 };
 
 enum rcb_axis {
diff --git a/drivers/staging/media/rkvdec2/rkvdec2.h b/drivers/staging/media/rkvdec2/rkvdec2.h
index 3982c0387869d..c23b45bd1ffc5 100644
--- a/drivers/staging/media/rkvdec2/rkvdec2.h
+++ b/drivers/staging/media/rkvdec2/rkvdec2.h
@@ -119,5 +119,6 @@ void rkvdec2_run_preamble(struct rkvdec2_ctx *ctx, struct rkvdec2_run *run);
 void rkvdec2_run_postamble(struct rkvdec2_ctx *ctx, struct rkvdec2_run *run);
 
 extern const struct rkvdec2_coded_fmt_ops rkvdec2_h264_fmt_ops;
+extern const struct rkvdec2_coded_fmt_ops rkvdec2_hevc_fmt_ops;
 
 #endif /* RKVDEC_H_ */
-- 
GitLab

