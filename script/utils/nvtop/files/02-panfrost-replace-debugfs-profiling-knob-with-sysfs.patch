From df270aa5ad874e422e336a622a32c76e5892c5d4 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Adri=C3=A1n=20Larumbe?= <adrian.larumbe@collabora.com>
Date: Thu, 14 Mar 2024 03:34:25 +0000
Subject: [PATCH] panfrost: replace debugfs profiling knob with sysfs
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Kernel commit b12f3ea7c188 ("drm/panfrost: Replace fdinfo's profiling debugfs
knob with sysfs") did away with the debugfs knob that lets profilers enable the
hardware support for job accounting and fdinfo numbers. It was replaced with a
similar interface, but this time around through sysfs.

Reflect this change in nvtop.

Signed-off-by: Adri√°n Larumbe <adrian.larumbe@collabora.com>
---
 src/extract_gpuinfo_mali_common.c |   4 +
 src/extract_gpuinfo_panfrost.c    | 118 ++++++++++++++++++++++--------
 src/mali_common.h                 |   3 +-
 3 files changed, 93 insertions(+), 32 deletions(-)

diff --git a/src/extract_gpuinfo_mali_common.c b/src/extract_gpuinfo_mali_common.c
index a1c5600..eab63f9 100644
--- a/src/extract_gpuinfo_mali_common.c
+++ b/src/extract_gpuinfo_mali_common.c
@@ -94,6 +94,10 @@ bool mali_init_drm_funcs(struct drmFuncTable *drmFuncs,
   if (!drmFuncs->drmCommandWriteRead)
     goto init_error_clean_exit;
 
+  drmFuncs->drmGetDeviceFromDevId = dlsym(state->libdrm_handle, "drmGetDeviceFromDevId");
+  if (!drmFuncs->drmGetDeviceFromDevId)
+    goto init_error_clean_exit;
+
   drmFuncs->drmIoctl = dlsym(state->libdrm_handle, "drmIoctl");
   if (!drmFuncs->drmCommandWriteRead)
     goto init_error_clean_exit;
diff --git a/src/extract_gpuinfo_panfrost.c b/src/extract_gpuinfo_panfrost.c
index f99c7be..d4c32e7 100644
--- a/src/extract_gpuinfo_panfrost.c
+++ b/src/extract_gpuinfo_panfrost.c
@@ -64,22 +64,21 @@ bool gpuinfo_panfrost_init(void) {
 void gpuinfo_panfrost_shutdown(void) {
   for (unsigned i = 0; i < mali_state.mali_gpu_count; ++i) {
     struct panfrost_driver_data *prof_info = &mali_state.gpu_infos[i].model.panfrost;
-    char debugfs_profile_file[256] = {0};
-    FILE *debugfs_profiling;
+    FILE *fprofiling;
 
-    snprintf(debugfs_profile_file, sizeof(debugfs_profile_file),
-             "/sys/kernel/debug/dri/%d/profile", prof_info->minor);
-    debugfs_profiling = fopen(debugfs_profile_file, "w");
-    if (debugfs_profiling == NULL) {
+    fprofiling = fopen(prof_info->sysfs_filename, "w");
+    if (fprofiling == NULL) {
             fprintf(stderr, "Panfrost's profile parameter sysfs hook seems gone\n");
+            free(prof_info->sysfs_filename);
             continue;
     }
 
     char buf = prof_info->original_profiling_state ? '1' : '0';
-    size_t size = fwrite(&buf, sizeof(char), 1, debugfs_profiling);
+    size_t size = fwrite(&buf, sizeof(char), 1, fprofiling);
     if (!size)
-            fprintf(stderr, "restoring debugfs state didn't work\n");
-    fclose(debugfs_profiling);
+            fprintf(stderr, "restoring profiling state didn't work\n");
+    fclose(fprofiling);
+    free(prof_info->sysfs_filename);
   }
 
   mali_shutdown_common(&mali_state, &drmFuncs);
@@ -133,53 +132,110 @@ static bool parse_drm_fdinfo_panfrost(struct gpu_info *info, FILE *fdinfo_file,
   return true;
 }
 
+static char *get_sysfs_filename(struct gpu_info_mali *gpu_info) {
+  char sysfs_file[PATH_MAX + 1] = {0};
+  char *fullname, *of_name, *node;
+  const char *bus_name = NULL;
+  drmDevicePtr device;
+  struct stat filebuf;
+  unsigned int i;
+  int ret;
+
+  static struct {
+    const char *name;
+    int bus_type;
+  } bus_types[] = {
+    { "/pci", DRM_BUS_PCI },
+    { "/usb", DRM_BUS_USB },
+    { "/platform", DRM_BUS_PLATFORM },
+    { "/host1x", DRM_BUS_HOST1X },
+  };
+
+  fstat(gpu_info->fd, &filebuf);
+
+  ret = drmFuncs.drmGetDeviceFromDevId(filebuf.st_rdev, 0, &device);
+  if (ret) {
+    fprintf(stderr, "drmGetDeviceFromDevId failed with %d\n", ret);
+    goto sysfs_end;
+  }
+
+  fullname = device->businfo.platform->fullname;
+
+  node = strrchr(fullname, '@');
+  of_name = strrchr(fullname, '/');
+  if (node == NULL || of_name == NULL)
+    goto sysfs_end;
+  *node = '\0'; node++;;
+  *of_name = '\0'; of_name++;
+
+  for (i = 0; i < (sizeof(bus_types) / sizeof(typeof(bus_types[0]))); i++) {
+    if (bus_types[i].bus_type == device->bustype) {
+      bus_name = bus_types[i].name;
+      break;
+    }
+  }
+
+  if (bus_name == NULL) {
+    fprintf(stderr, "Unknown bus type = %d\n", device->bustype);
+    goto sysfs_end;
+  }
+
+  snprintf(sysfs_file, PATH_MAX + 1, "/sys/devices%s%s/%s.%s/profiling", bus_name, fullname, node, of_name);
+
+sysfs_end:
+  free(device);
+  return (!sysfs_file[0]) ? NULL : strdup(sysfs_file);
+}
+
 static bool panfrost_open_sysfs_profile(struct gpu_info_mali *gpu_info) {
   struct panfrost_driver_data *prof_info = &gpu_info->model.panfrost;
-  char debugfs_profile_file[256] = {0};
-  FILE *debugfs_profiling;
-  struct stat filebuf;
+  FILE *fprofiling;
   bool ret = true;
 
   if (!gpu_info->fd || gpu_info->version != MALI_PANFROST)
     return false;
 
-  fstat(gpu_info->fd, &filebuf);
-  prof_info->minor = minor(filebuf.st_rdev);
-  snprintf(debugfs_profile_file, sizeof(debugfs_profile_file),
-           "/sys/kernel/debug/dri/%d/profile", prof_info->minor);
-
-  debugfs_profiling = fopen(debugfs_profile_file, "r");
-  if (debugfs_profiling == NULL) {
-    fprintf(stderr, "profile parameter not implemented in Panfrost\n");
+  prof_info->sysfs_filename = get_sysfs_filename(gpu_info);
+  if (prof_info->sysfs_filename == NULL)
     return false;
+
+  fprofiling = fopen(prof_info->sysfs_filename, "r");
+  if (fprofiling == NULL) {
+    fprintf(stderr, "Profiling state not available in Panfrost\n");
+    goto file_error;
   }
 
   char buf = 0;
-  size_t size = fread(&buf, sizeof(char), 1, debugfs_profiling);
+  size_t size = fread(&buf, sizeof(char), 1, fprofiling);
   if (!size) {
     fprintf(stderr, "Error reading profiling state\n");
-    ret = false;
-    goto file_error;
+    goto format_error;
   }
 
   prof_info->original_profiling_state = (buf == '1') ? true : false;
 
-  fclose(debugfs_profiling);
-  debugfs_profiling = fopen(debugfs_profile_file, "w");
-  if (debugfs_profiling == NULL) {
-    fprintf(stderr, "profile parameter not implemented in Panfrost\n");
-    return false;
+  fclose(fprofiling);
+  fprofiling = fopen(prof_info->sysfs_filename, "w");
+  if (fprofiling == NULL) {
+    fprintf(stderr, "Profiling state not available in Panfrost\n");
+    goto file_error;
   }
 
   buf = '1';
-  size = fwrite(&buf, sizeof(char), 1, debugfs_profiling);
+  size = fwrite(&buf, sizeof(char), 1, fprofiling);
   if (!size) {
     fprintf(stderr, "Error writing profiling state\n");
-    ret = false;
   }
 
+format_error:
+  fclose(fprofiling);
+  if (!size)
+    ret = false;
 file_error:
-  fclose(debugfs_profiling);
+  if (fprofiling == NULL)
+    ret = false;
+  if (ret)
+    free(prof_info->sysfs_filename);
   return ret;
 }
 
diff --git a/src/mali_common.h b/src/mali_common.h
index 73748ab..c4b9e29 100644
--- a/src/mali_common.h
+++ b/src/mali_common.h
@@ -38,6 +38,7 @@ struct drmFuncTable {
   typeof(drmAuthMagic) *drmAuthMagic;
   typeof(drmDropMaster) *drmDropMaster;
   typeof(drmCommandWriteRead) *drmCommandWriteRead;
+  typeof(drmGetDeviceFromDevId) *drmGetDeviceFromDevId;
   typeof(drmIoctl) *drmIoctl;
 };
 
@@ -52,7 +53,7 @@ struct mali_process_info_cache;
 struct panfrost_driver_data {
   bool original_profiling_state;
   bool profiler_enabled;
-  unsigned int minor;
+  char *sysfs_filename;
 };
 struct panthor_driver_data {
   uint32_t unused;
