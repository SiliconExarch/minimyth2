From 2c428c149114983da6679ad8539629c7305e24c7 Mon Sep 17 00:00:00 2001
From: Paul Gardiner <mythtv@glidos.net>
Date: Tue, 28 Nov 2023 12:12:46 +0000
Subject: [PATCH] Factor out the best track calculation for selecting the
 subtitle track

Also generalise the algorithm to allow forced tracks to be disfavored.
This is work towards improving the handling of forced tracks.
---
 .../libs/libmythtv/decoders/decoderbase.cpp   | 86 ++++++++++++-------
 mythtv/libs/libmythtv/decoders/decoderbase.h  |  1 +
 2 files changed, 55 insertions(+), 32 deletions(-)

diff --git a/mythtv/libs/libmythtv/decoders/decoderbase.cpp b/mythtv/libs/libmythtv/decoders/decoderbase.cpp
index 5bde9e38db9..d6844d10ac2 100644
--- a/mythtv/libs/libmythtv/decoders/decoderbase.cpp
+++ b/mythtv/libs/libmythtv/decoders/decoderbase.cpp
@@ -1036,6 +1036,58 @@ bool DecoderBase::InsertTrack(uint Type, const StreamInfo &Info)
     return true;
 }
 
+/** \fn DecoderBase::BestTrack(uint, bool)
+ *  \brief Determine the best track according to weights
+ *
+ * Select the best track.  Primary attribute is to favor or disfavor
+ * a forced track. Secondary attribute is language preference,
+ * in order of most preferred to least preferred language.
+ * Third attribute is track order, preferring the earliesttrack.
+ *
+ * Whether to favor or disfavor forced is controlled by the second
+ * parameter.
+ *
+ * This function must not be called without taking m_trackLock
+ *
+ *  \return the highest weighted track, or -1 if none.
+*/
+int DecoderBase::BestTrack(uint Type, bool forcedPreferred)
+{
+    LOG(VB_PLAYBACK, LOG_INFO, LOC + QString("Trying to select track (w/lang & %1forced)")
+        .arg(forcedPreferred ? "" : "!"));
+    const int kForcedWeight   = forcedPreferred ? (1 << 20) : -(1 << 20);
+    const int kLanguageWeight = (1 << 10);
+    const int kPositionWeight = (1 << 0);
+    int bestScore = -1;
+    int selTrack = -1;
+    uint numStreams = static_cast<uint>(m_tracks[Type].size());
+
+    for (uint i = 0; i < numStreams; i++)
+    {
+        bool forced = (Type == kTrackTypeSubtitle &&
+                        m_tracks[Type][i].m_forced &&
+                        m_parent->ForcedSubtitlesFavored());
+        int position = static_cast<int>(numStreams) - static_cast<int>(i);
+        int language = 0;
+        for (uint j = 0; (language == 0) && (j < m_languagePreference.size()); ++j)
+        {
+            if (m_tracks[Type][i].m_language == m_languagePreference[j])
+                language = static_cast<int>(m_languagePreference.size()) - static_cast<int>(j);
+        }
+        int score = (1 << 20) +
+                    (kForcedWeight * static_cast<int>(forced)) +
+                    (kLanguageWeight * language) +
+                    (kPositionWeight * position);
+        if (score > bestScore)
+        {
+            bestScore = score;
+            selTrack = static_cast<int>(i);
+        }
+    }
+
+    return selTrack;
+}
+
 /** \fn DecoderBase::AutoSelectTrack(uint)
  *  \brief Select best track.
  *
@@ -1090,38 +1142,8 @@ int DecoderBase::AutoSelectTrack(uint Type)
 
     if (selTrack < 0)
     {
-        // Select the best track.  Primary attribute is to favor a
-        // forced track.  Secondary attribute is language preference,
-        // in order of most preferred to least preferred language.
-        // Third attribute is track order, preferring the earliest
-        // track.
-        LOG(VB_PLAYBACK, LOG_INFO, LOC + "Trying to select track (w/lang & forced)");
-        const int kForcedWeight   = (1 << 20);
-        const int kLanguageWeight = (1 << 10);
-        const int kPositionWeight = (1 << 0);
-        int bestScore = -1;
-        selTrack = 0;
-        for (uint i = 0; i < numStreams; i++)
-        {
-            bool forced = (Type == kTrackTypeSubtitle &&
-                           m_tracks[Type][i].m_forced &&
-                           m_parent->ForcedSubtitlesFavored());
-            int position = static_cast<int>(numStreams) - static_cast<int>(i);
-            int language = 0;
-            for (uint j = 0; (language == 0) && (j < m_languagePreference.size()); ++j)
-            {
-                if (m_tracks[Type][i].m_language == m_languagePreference[j])
-                    language = static_cast<int>(m_languagePreference.size()) - static_cast<int>(j);
-            }
-            int score = (kForcedWeight * static_cast<int>(forced)) +
-                        (kLanguageWeight * language) +
-                        (kPositionWeight * position);
-            if (score > bestScore)
-            {
-                bestScore = score;
-                selTrack = static_cast<int>(i);
-            }
-        }
+        // Find best track favoring forced.
+        selTrack = BestTrack(Type, true);
     }
 
     int oldTrack = m_currentTrack[Type];
diff --git a/mythtv/libs/libmythtv/decoders/decoderbase.h b/mythtv/libs/libmythtv/decoders/decoderbase.h
index d504da2b382..0df15486088 100644
--- a/mythtv/libs/libmythtv/decoders/decoderbase.h
+++ b/mythtv/libs/libmythtv/decoders/decoderbase.h
@@ -264,6 +264,7 @@ class DecoderBase
     static AVPixelFormat GetBestVideoFormat(AVPixelFormat* Formats, const VideoFrameTypes* RenderFormats);
 
   protected:
+    int          BestTrack(uint Type, bool forcedPreferred);
     virtual int  AutoSelectTrack(uint Type);
     void         AutoSelectTracks(void);
     void         ResetTracks(void);
From 22baa1bf04a93a349d97599369e9b35ee3453ad6 Mon Sep 17 00:00:00 2001
From: Paul Gardiner <mythtv@glidos.net>
Date: Tue, 28 Nov 2023 15:55:07 +0000
Subject: [PATCH] Handle forced AV subtitles without needing a forced track to
 be selected

This improves the behaviour of mythfrontend in its automatic handling of
forced subtitle tracks. The previous behaviour relied on automatically
selecting the forced track as a default for the user's preference. The new
behaviour attempts to find a non-forced track for the user's preference and
changes the subtitle toggle feature to be between forced and non-forced,
rather than on and off.
---
 .../libmythtv/decoders/avformatdecoder.cpp     |  7 ++++++-
 mythtv/libs/libmythtv/decoders/decoderbase.cpp | 18 ++++++++++++++++++
 mythtv/libs/libmythtv/decoders/decoderbase.h   |  1 +
 3 files changed, 25 insertions(+), 1 deletion(-)

diff --git a/mythtv/libs/libmythtv/decoders/avformatdecoder.cpp b/mythtv/libs/libmythtv/decoders/avformatdecoder.cpp
index 6950e70cc9f..f66ec3d4594 100644
--- a/mythtv/libs/libmythtv/decoders/avformatdecoder.cpp
+++ b/mythtv/libs/libmythtv/decoders/avformatdecoder.cpp
@@ -3916,6 +3916,7 @@ bool AvFormatDecoder::ProcessSubtitlePacket(AVStream *curstream, AVPacket *pkt)
 
     m_trackLock.lock();
     int subIdx = m_selectedTrack[kTrackTypeSubtitle].m_av_stream_index;
+    int forcedSubIdx = m_selectedForcedSubtitleTrack.m_av_stream_index;
     bool isForcedTrack = m_selectedTrack[kTrackTypeSubtitle].m_forced;
     m_trackLock.unlock();
 
@@ -3941,7 +3942,8 @@ bool AvFormatDecoder::ProcessSubtitlePacket(AVStream *curstream, AVPacket *pkt)
             }
         }
     }
-    else if (m_decodeAllSubtitles || pkt->stream_index == subIdx)
+    else if (m_decodeAllSubtitles || pkt->stream_index == subIdx
+                                  || pkt->stream_index == forcedSubIdx)
     {
         m_avCodecLock.lock();
         AVCodecContext *ctx = m_codecMap.GetCodecContext(curstream);
@@ -3950,6 +3952,9 @@ bool AvFormatDecoder::ProcessSubtitlePacket(AVStream *curstream, AVPacket *pkt)
 
         subtitle.start_display_time += pts;
         subtitle.end_display_time += pts;
+
+        if (pkt->stream_index == forcedSubIdx)
+            isForcedTrack = true;
     }
 
     if (gotSubtitles)
diff --git a/mythtv/libs/libmythtv/decoders/decoderbase.cpp b/mythtv/libs/libmythtv/decoders/decoderbase.cpp
index d6844d10ac2..6d1e66893a7 100644
--- a/mythtv/libs/libmythtv/decoders/decoderbase.cpp
+++ b/mythtv/libs/libmythtv/decoders/decoderbase.cpp
@@ -1144,6 +1144,24 @@ int DecoderBase::AutoSelectTrack(uint Type)
     {
         // Find best track favoring forced.
         selTrack = BestTrack(Type, true);
+
+        if (Type == kTrackTypeSubtitle)
+        {
+            if (m_tracks[Type][selTrack].m_forced)
+            {
+                // A forced AV Subtitle tracks is handled without the user
+                // explicitly enabling subtitles. Try to find a good non-forced
+                // track that can be swapped to in the case the user does
+                // explicitly enable subtitles.
+                int nonForcedTrack = BestTrack(Type, false);
+
+                if (!m_tracks[Type][nonForcedTrack].m_forced)
+                {
+                    m_selectedForcedSubtitleTrack = m_tracks[Type][selTrack];
+                    selTrack = nonForcedTrack;
+                }
+            }
+        }
     }
 
     int oldTrack = m_currentTrack[Type];
diff --git a/mythtv/libs/libmythtv/decoders/decoderbase.h b/mythtv/libs/libmythtv/decoders/decoderbase.h
index 0df15486088..a21b6f253dd 100644
--- a/mythtv/libs/libmythtv/decoders/decoderbase.h
+++ b/mythtv/libs/libmythtv/decoders/decoderbase.h
@@ -361,6 +361,7 @@ class DecoderBase
     std::array<sinfo_vec_t,kTrackTypeCount> m_tracks;
     std::array<StreamInfo, kTrackTypeCount> m_wantedTrack;
     std::array<StreamInfo, kTrackTypeCount> m_selectedTrack;
+    StreamInfo           m_selectedForcedSubtitleTrack;
 
     /// language preferences for auto-selection of streams
     std::vector<int>     m_languagePreference;
From 135ca8fef784e25d6d6d515da4cc46b3a983f422 Mon Sep 17 00:00:00 2001
From: Paul Gardiner <mythtv@glidos.net>
Date: Tue, 28 Nov 2023 17:15:49 +0000
Subject: [PATCH] Avoid displaying two AV subtitle tracks simultaneously

Recent changes to the handling of forced AV subtitle tracks require that
two tracks may be considered for processing simultaneously. This happens
if there is a forced track and a user enabled one. This commit ensures
that the user enabled one inhibits the forced one.
---
 mythtv/libs/libmythtv/captions/subtitlereader.cpp     | 8 ++++++++
 mythtv/libs/libmythtv/captions/subtitlereader.h       | 2 +-
 mythtv/libs/libmythtv/captions/textsubtitleparser.cpp | 2 +-
 mythtv/libs/libmythtv/decoders/avformatdecoder.cpp    | 7 ++++++-
 4 files changed, 16 insertions(+), 3 deletions(-)

diff --git a/mythtv/libs/libmythtv/captions/subtitlereader.cpp b/mythtv/libs/libmythtv/captions/subtitlereader.cpp
index 6005dc9088c..a5ee438b368 100644
--- a/mythtv/libs/libmythtv/captions/subtitlereader.cpp
+++ b/mythtv/libs/libmythtv/captions/subtitlereader.cpp
@@ -57,10 +57,18 @@ void SubtitleReader::SeekFrame(int64_t ts, int flags)
 
 bool SubtitleReader::AddAVSubtitle(AVSubtitle &subtitle,
                                    bool fix_position,
+                                   bool is_selected_forced_track,
                                    bool allow_forced)
 {
     bool enableforced = false;
     bool forced = false;
+
+    if (m_avSubtitlesEnabled && is_selected_forced_track)
+    {
+        FreeAVSubtitle(subtitle);
+        return enableforced;
+    }
+
     for (unsigned i = 0; i < subtitle.num_rects; i++)
     {
         forced = forced || static_cast<bool>(subtitle.rects[i]->flags & AV_SUBTITLE_FLAG_FORCED);
diff --git a/mythtv/libs/libmythtv/captions/subtitlereader.h b/mythtv/libs/libmythtv/captions/subtitlereader.h
index 8ca67bdf7a4..ef8b839d3e5 100644
--- a/mythtv/libs/libmythtv/captions/subtitlereader.h
+++ b/mythtv/libs/libmythtv/captions/subtitlereader.h
@@ -56,7 +56,7 @@ class SubtitleReader : public QObject
 
     AVSubtitles* GetAVSubtitles(void) { return &m_avSubtitles; }
     bool AddAVSubtitle(AVSubtitle& subtitle, bool fix_position,
-                       bool allow_forced);
+                       bool is_selected_forced_track, bool allow_forced);
     void ClearAVSubtitles(void);
     static void FreeAVSubtitle(AVSubtitle &sub);
 
diff --git a/mythtv/libs/libmythtv/captions/textsubtitleparser.cpp b/mythtv/libs/libmythtv/captions/textsubtitleparser.cpp
index 00b451fea8f..98ecfcf6ef7 100644
--- a/mythtv/libs/libmythtv/captions/textsubtitleparser.cpp
+++ b/mythtv/libs/libmythtv/captions/textsubtitleparser.cpp
@@ -255,7 +255,7 @@ int TextSubtitleParser::ReadNextSubtitle(void)
     sub.start_display_time = av_q2d(m_stream->time_base) * m_pkt->dts * 1000;
     sub.end_display_time = av_q2d(m_stream->time_base) * (m_pkt->dts + m_pkt->duration) * 1000;
 
-    m_parent->AddAVSubtitle(sub, m_decCtx->codec_id == AV_CODEC_ID_XSUB, false);
+    m_parent->AddAVSubtitle(sub, m_decCtx->codec_id == AV_CODEC_ID_XSUB, false, false);
     return ret;
 }
 
diff --git a/mythtv/libs/libmythtv/decoders/avformatdecoder.cpp b/mythtv/libs/libmythtv/decoders/avformatdecoder.cpp
index f66ec3d4594..a602f553af8 100644
--- a/mythtv/libs/libmythtv/decoders/avformatdecoder.cpp
+++ b/mythtv/libs/libmythtv/decoders/avformatdecoder.cpp
@@ -3917,6 +3917,7 @@ bool AvFormatDecoder::ProcessSubtitlePacket(AVStream *curstream, AVPacket *pkt)
     m_trackLock.lock();
     int subIdx = m_selectedTrack[kTrackTypeSubtitle].m_av_stream_index;
     int forcedSubIdx = m_selectedForcedSubtitleTrack.m_av_stream_index;
+    bool isSelectedForcedTrack = false;
     bool isForcedTrack = m_selectedTrack[kTrackTypeSubtitle].m_forced;
     m_trackLock.unlock();
 
@@ -3954,7 +3955,10 @@ bool AvFormatDecoder::ProcessSubtitlePacket(AVStream *curstream, AVPacket *pkt)
         subtitle.end_display_time += pts;
 
         if (pkt->stream_index == forcedSubIdx)
+        {
+            isSelectedForcedTrack = true;
             isForcedTrack = true;
+        }
     }
 
     if (gotSubtitles)
@@ -3973,7 +3977,8 @@ bool AvFormatDecoder::ProcessSubtitlePacket(AVStream *curstream, AVPacket *pkt)
                 .arg(subtitle.end_display_time));
 
         bool forcedon = m_parent->GetSubReader(pkt->stream_index)->AddAVSubtitle(
-                subtitle, curstream->codecpar->codec_id == AV_CODEC_ID_XSUB,
+                subtitle, isSelectedForcedTrack,
+                curstream->codecpar->codec_id == AV_CODEC_ID_XSUB,
                 m_parent->GetAllowForcedSubtitles());
          m_parent->EnableForcedSubtitles(forcedon || isForcedTrack);
     }
